// üåê SISTEMA DE REDE SIMPLIFICADO - Robusticidade sem complexidade
// Baseado na recomenda√ß√£o "colar e rodar" - proxy opcional via PROXY_URL
import { HttpsProxyAgent } from 'https-proxy-agent';
import ccxt from 'ccxt';
import { http } from './http-client.js';

// üîß CONFIGURA√á√ÉO SIMPLES - apenas PROXY_URL opcional
const { PROXY_URL, BINANCE_API_KEY, BINANCE_SECRET_KEY } = process.env;

/**
 * üöÄ CRIA AGENTE PROXY APENAS SE PROXY_URL ESTIVER DEFINIDO
 * - Sem autentica√ß√£o complexa
 * - Sem fallbacks m√∫ltiplos
 * - Se PROXY_URL vazio ‚Üí conex√£o direta
 */
export function makeAgent() {
  if (!PROXY_URL || PROXY_URL.trim() === '') {
    console.log('üåê Net: Proxy URL n√£o definido - usando conex√£o DIRETA');
    return undefined;
  }
  
  try {
    console.log('üîß Net: Criando proxy agent para:', redactUrl(PROXY_URL));
    return new HttpsProxyAgent(PROXY_URL);
  } catch (error) {
    console.error('‚ùå Net: Erro criando proxy agent:', error.message);
    console.log('üåê Net: Fallback para conex√£o DIRETA');
    return undefined;
  }
}

/**
 * üî• CRIA INST√ÇNCIA CCXT PARA SPOT
 */
export function makeSpotExchange() {
  const agent = makeAgent();
  
  const options = {
    apiKey: BINANCE_API_KEY || '',
    secret: BINANCE_SECRET_KEY || '',
    sandbox: false,
    enableRateLimit: true,
    timeout: 15000,
    options: {
      defaultType: 'spot',
      adjustForTimeDifference: true,
    },
  };
  
  // üåê APLICAR PROXY AGENT SE DISPON√çVEL
  if (agent) {
    options.agent = agent;
    console.log('üîß Net: CCXT Spot configurado com proxy');
  } else {
    console.log('üåê Net: CCXT Spot configurado para conex√£o DIRETA');
  }
  
  return new ccxt.binance(options);
}

/**
 * üíé CRIA INST√ÇNCIA CCXT PARA FUTURES
 */
export function makeFuturesExchange() {
  const agent = makeAgent();
  
  const options = {
    apiKey: BINANCE_API_KEY || '',
    secret: BINANCE_SECRET_KEY || '',
    sandbox: false,
    enableRateLimit: true,
    timeout: 15000,
    options: {
      defaultType: 'swap', // USDT-M perpetuals
      adjustForTimeDifference: true,
    },
  };
  
  // üåê APLICAR PROXY AGENT SE DISPON√çVEL
  if (agent) {
    options.agent = agent;
    console.log('üîß Net: CCXT Futures configurado com proxy');
  } else {
    console.log('üåê Net: CCXT Futures configurado para conex√£o DIRETA');
  }
  
  return new ccxt.binance(options);
}

/**
 * üö® FETCH COM KILL-SWITCH AUTOM√ÅTICO
 * - Usa axios com interceptors para detectar bloqueio geogr√°fico  
 * - Kill-switch autom√°tico em HTTP 451/403
 * - Proxy opcional via PROXY_URL
 */
export async function makeFetch(url, options = {}) {
  console.log('üåê Proxied fetch:', url.length > 60 ? url.substring(0, 60) + '...' : url);
  
  const agent = makeAgent();
  const axiosConfig = {
    url,
    method: options.method || 'GET',
    timeout: 10000,
    ...options,
    httpsAgent: agent,
    httpAgent: agent
  };
  
  try {
    const response = await http(axiosConfig);
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText,
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))
    };
  } catch (error) {
    console.error(`‚ùå Net: Fetch error for ${redactUrl(url)}:`, error.message);
    throw error;
  }
}

/**
 * üõ°Ô∏è REDUZ URL PARA LOG SEGURO
 */
function redactUrl(url) {
  if (!url) return '[undefined]';
  
  try {
    const parsed = new URL(url);
    return `${parsed.protocol}//${parsed.host}`;
  } catch {
    return '[invalid-url]';
  }
}

/**
 * üìä STATUS DO SISTEMA DE REDE
 */
export function getNetworkStatus() {
  return {
    proxyEnabled: !!PROXY_URL && PROXY_URL.trim() !== '',
    proxyUrl: PROXY_URL ? redactUrl(PROXY_URL) : null,
    hasApiKey: !!BINANCE_API_KEY,
    hasSecret: !!BINANCE_SECRET_KEY,
  };
}